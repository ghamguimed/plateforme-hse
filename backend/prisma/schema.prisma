// ---------- Prisma base ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums (mappés sur tes ENUM PostgreSQL) ----------
enum Role {
  AUDITEUR
  HSE
  PM
  ADMIN

  @@map("role_enum")
}

enum StatutAudit {
  BROUILLON
  EN_COURS
  CLOTURE
  VALIDE

  @@map("statut_audit_enum")
}

enum Gravite {
  FAIBLE
  MOYENNE
  HAUTE
  CRITIQUE

  @@map("gravite_enum")
}

enum StatutAnomalie {
  OUVERTE
  EN_COURS
  RESOLUE

  @@map("statut_anomalie_enum")
}

enum PhotoType {
  CONSTAT
  RESOLUTION

  @@map("photo_type_enum")
}

// ---------- Modèles (mappés sur tes tables existantes) ----------
model Service {
  id            String        @id @db.Char(36)
  nom           String        @db.VarChar(100)
  utilisateurs  Utilisateur[]

  @@map("service")
}

model Utilisateur {
  id           String   @id @db.Char(36)
  nom          String   @db.VarChar(120)
  email        String   @unique @db.VarChar(160)
  role         Role
  serviceId    String?  @map("service_id") @db.Char(36)
  actif        Boolean  @default(true)

  service      Service?     @relation(fields: [serviceId], references: [id])
  audits       Audit[]      @relation("AuditAuditeur")
  anomaliesAssignees Anomalie[] @relation("AnomalieResponsable")
  commentaires Commentaire[]

  @@map("utilisateur")
}

model StandardHse {
  id            String       @id @db.Char(36)
  code          String       @db.VarChar(20)
  libelle       String       @db.VarChar(200)

  anomalies     Anomalie[]
  checklist     ChecklistItem[]

  @@map("standard_hse")
}

model Audit {
  id          String        @id @db.Char(36)
  code        String        @unique @db.VarChar(40)
  site        String        @db.VarChar(120)
  zone        String        @db.VarChar(120)
  dateAudit   DateTime      @map("date_audit") @db.Date
  statut      StatutAudit   @default(BROUILLON)
  auditeurId  String        @map("auditeur_id") @db.Char(36)

  auditeur    Utilisateur   @relation("AuditAuditeur", fields: [auditeurId], references: [id])
  rapport     Rapport?
  anomalies   Anomalie[]
  photos      Photo[]
  checklist   ChecklistItem[]

  @@map("audit")
}

model Rapport {
  id        String   @id @db.Char(36)
  auditId   String   @unique @map("audit_id") @db.Char(36)
  urlPdf    String   @map("url_pdf") @db.VarChar(500)
  genereLe  DateTime @map("genere_le")

  audit     Audit    @relation(fields: [auditId], references: [id])

  @@map("rapport")
}

model Anomalie {
  id                 String          @id @db.Char(36)
  auditId            String          @map("audit_id") @db.Char(36)
  titre              String          @db.VarChar(200)
  description        String
  standardId         String?         @map("standard_id") @db.Char(36)
  gravite            Gravite
  statut             StatutAnomalie  @default(OUVERTE)
  responsableHseId   String?         @map("responsable_hse_id") @db.Char(36)
  dueDate            DateTime?       @map("due_date") @db.Date
  createdAt          DateTime        @map("created_at") @default(now())

  audit              Audit           @relation(fields: [auditId], references: [id])
  standard           StandardHse?    @relation(fields: [standardId], references: [id])
  responsableHse     Utilisateur?    @relation("AnomalieResponsable", fields: [responsableHseId], references: [id])
  photos             Photo[]
  commentaires       Commentaire[]

  @@index([responsableHseId, statut], name: "idx_anomalie_responsable")
  @@index([auditId, statut], name: "idx_anomalie_audit")
  @@map("anomalie")
}

model Photo {
  id        String     @id @db.Char(36)
  auditId   String?    @map("audit_id") @db.Char(36)
  anomalieId String?   @map("anomalie_id") @db.Char(36)
  url       String     @db.VarChar(500)
  type      PhotoType
  creeLe    DateTime   @map("cree_le") @default(now())

  audit     Audit?     @relation(fields: [auditId], references: [id])
  anomalie  Anomalie?  @relation(fields: [anomalieId], references: [id])

  @@index([anomalieId], name: "idx_photo_anomalie")
  @@index([auditId], name: "idx_photo_audit")
  @@map("photo")
}

model Commentaire {
  id         String    @id @db.Char(36)
  anomalieId String    @map("anomalie_id") @db.Char(36)
  auteurId   String    @map("auteur_id") @db.Char(36)
  texte      String
  creeLe     DateTime  @map("cree_le") @default(now())

  anomalie   Anomalie  @relation(fields: [anomalieId], references: [id])
  auteur     Utilisateur @relation(fields: [auteurId], references: [id])

  @@map("commentaire")
}

model ChecklistItem {
  id         String       @id @db.Char(36)
  auditId    String       @map("audit_id") @db.Char(36)
  standardId String?      @map("standard_id") @db.Char(36)
  intitule   String       @db.VarChar(200)
  conforme   Boolean      @default(false)
  remarque   String?      @db.VarChar(500)

  audit      Audit        @relation(fields: [auditId], references: [id])
  standard   StandardHse? @relation(fields: [standardId], references: [id])

  @@map("checklist_item")
}
